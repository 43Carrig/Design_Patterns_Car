@startuml

abstract class CarBehaviour {

    TransmissionBehaviour transmissionBehaviour;
    EngineBehaviour engineBehaviour;

    + CarBehaviour()

    + void setTransmissionBehaviour(TransmissionBehaviour transmissionBehaviour)

    + String getTransmissionBehaviour()

    + String getEngineBehaviour()

    + void setEngineBehaviour(EngineBehaviour engineBehaviour)
}

class FamilyCar extends CarBehaviour {

    + FamilyCar()
        transmissionBehaviour = new Automatic()
        engineBehaviour = new StandardEngine()

}

class ModelCar extends CarBehaviour {

    + ModelCar()
        engineBehaviour = new NoEngine()
        transmissionBehaviour = new NoTransmission()
}

class SportsCar extends CarBehaviour {

    + SportsCar()
        transmissionBehaviour = new Manual()
        engineBehaviour = new TurboEngine()
}

class Automatic implements TransmissionBehaviour {

    + String gearShiftUp()

    + String gearShiftDown()
}

interface EngineBehaviour {
    String start()
    String stop()
    String noEngine()
}

class Manual implements TransmissionBehaviour {

    + String gearShiftUp()

    + String gearShiftDown()
}

class NoEngine implements EngineBehaviour {

    + String start()

    + String stop()

    + String noEngine()
}

class NoTransmission implements TransmissionBehaviour{

    + String gearShiftUp()

    + String gearShiftDown()
}

class StandardEngine implements EngineBehaviour {

    + String start()

    + String stop()

    + String noEngine()
}

interface TransmissionBehaviour {
    + String gearShiftUp()
    + String gearShiftDown()
}

class TurboEngine implements EngineBehaviour {

    + String start()

    + String stop()

    + String noEngine()
}

@enduml